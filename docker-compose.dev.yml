# ========================================
# 🛠️ 夢ログ 開発環境特化設定
# ========================================
# 
# 使用方法:
#   docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
# 
# 開発環境での最適化:
# - ホットリロード対応
# - 詳細なログ出力
# - 開発用ツールの有効化
# - パフォーマンス最適化

services:
  # =========================
  # 🗄️ PostgreSQL 開発設定
  # =========================
  db:
    # 開発用ログ設定
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=0
      -c shared_preload_libraries=pg_stat_statements
    # 開発用ヘルスチェック頻度を高く
    healthcheck:
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 5s

  # =========================
  # ⚡ Rails API 開発設定
  # =========================
  backend:
    build:
      args:
        RAILS_ENV: development
    # 📁 開発用ボリューム設定
    volumes:
      - ./backend:/app:cached                    # ソースコード同期（最高優先度）
      - backend_gems_dev:/usr/local/bundle       # Gem永続化（高速化）
      - backend_tmp_dev:/app/tmp                 # テンポラリファイル高速化
      - backend_log_dev:/app/log                 # ログファイル永続化
      - backend_node_modules:/app/node_modules   # Node.js依存関係（もしあれば）
    
    # 🔧 開発環境変数
    environment:
      - RAILS_ENV=development
      - RAILS_LOG_LEVEL=debug                    # 詳細ログ
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_SERVE_STATIC_FILES=false           # 開発では無効
      - RAILS_MAX_THREADS=1                      # デバッグ時の並行性を制限
      - BUNDLE_PATH=/usr/local/bundle
      
      # 🔍 デバッグ設定
      - RUBY_DEBUG_OPEN=true                     # リモートデバッグ対応
      - RUBY_DEBUG_HOST=0.0.0.0
      - RUBY_DEBUG_PORT=12345
      
      # 🚀 パフォーマンス監視
      - NEW_RELIC_AGENT_ENABLED=false            # 開発では無効
      - SKYLIGHT_AUTHENTICATION=disabled         # 開発では無効

    # 🐛 デバッグポート公開
    ports:
      - "3001:3001"    # Rails API
      - "12345:12345"  # Ruby Debug Protocol

    # 🏃 開発用起動コマンド
    command: >
      rails server -p 3001 -b 0.0.0.0
    
    # 🩺 開発用ヘルスチェック
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # =========================
  # 🎨 Next.js 開発設定
  # =========================
  frontend:
    # 📁 開発用ボリューム設定
    volumes:
      - ./frontend:/app:cached                   # ソースコード同期（最高優先度）
      - frontend_node_modules_dev:/app/node_modules  # node_modules永続化
      - frontend_next_cache_dev:/app/.next       # Next.jsキャッシュ永続化
    
    # 🔧 開発環境変数
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - INTERNAL_API_URL=http://backend:3001
      
      # 🔥 ホットリロード最適化
      - WATCHPACK_POLLING=true                   # ファイル監視（Mac/Win）
      - CHOKIDAR_USEPOLLING=true                 # 変更検知安定化
      - FAST_REFRESH=true                        # React Fast Refresh
      
      # 🚀 開発用最適化
      - NEXT_TELEMETRY_DISABLED=1                # テレメトリ無効
      - DISABLE_ESLINT_PLUGIN=false              # ESLintプラグイン有効

    # 🏃 開発用起動コマンド（詳細ログ付き）
    command: >
      sh -c "
        echo '🎨 フロントエンド開発環境起動中...' &&
        yarn install &&
        echo '📦 依存関係インストール完了' &&
        echo '🔥 ホットリロード有効で起動中...' &&
        yarn dev
      "

# =========================
# 📁 開発用Named Volumes
# =========================
volumes:
  # バックエンド開発用
  backend_gems_dev:
    name: dream_journal_dev_gems
  backend_tmp_dev:
    name: dream_journal_dev_tmp
  backend_log_dev:
    name: dream_journal_dev_log
  backend_node_modules:
    name: dream_journal_dev_backend_node_modules
  
  # フロントエンド開発用
  frontend_node_modules_dev:
    name: dream_journal_dev_frontend_node_modules
  frontend_next_cache_dev:
    name: dream_journal_dev_next_cache

# =========================
# 🌐 開発用ネットワーク
# =========================
networks:
  default:
    name: dream_journal_dev_network
    driver: bridge